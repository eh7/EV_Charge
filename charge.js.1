var express     = require('express');
var app         = express();
var path        = require('path');
var fs          = require('fs');

var config      = require('./config'); // get our config file

var Web3  = require("web3");
var web3 = new Web3();
var ethereumjs_abi = require('ethereumjs-abi');

//web3.setProvider(new web3.providers.HttpProvider("http://127.0.0.1:9545"))
web3.setProvider(new web3.providers.HttpProvider(config.web3_provider))

var addr = config.contract_address;
var abi =  config.contract_abi;

/*
var abi = [ { constant: true, inputs: [], name: 'count', outputs: [ [Object] ], payable: false, stateMutability: 'view', type: 'function' }, { constant: true, inputs: [], name: 'owner', outputs: [ [Object] ], payable: false, stateMutability: 'view', type: 'function' }, { inputs: [], payable: false, stateMutability: 'nonpayable', type: 'constructor' }, { anonymous: false, inputs: [ [Object], [Object], [Object], [Object] ], name: 'AddedChargeRecord', type: 'event' }, { constant: false, inputs: [], name: 'kill', outputs: [], payable: false, stateMutability: 'nonpayable', type: 'function' }, { constant: false, inputs: [ [Object] ], name: 'add_charge_record', outputs: [], payable: false, stateMutability: 'nonpayable', type: 'function' }, { constant: true, inputs: [ [Object] ], name: 'get_timestamp', outputs: [ [Object] ], payable: false, stateMutability: 'view', type: 'function' }, { constant: true, inputs: [ [Object] ], name: 'get_duration', outputs: [ [Object] ], payable: false, stateMutability: 'view', type: 'function' }, { constant: true, inputs: [ [Object] ], name: 'get_user_address', outputs: [ [Object] ], payable: false, stateMutability: 'view', type: 'function' } ]; 
console.log(addr)
console.log(abi)
*/

var Charge = new web3.eth.Contract(abi, addr);

var eventCount = 0;
var chargeEvents = [];

var allEvents = Charge.getPastEvents({fromBlock: 0, toBlock: 'latest'}, function(error, events) {

  if(error) console.log(error);

  for(i=0;i<events.length;i++){

    var rawData = JSON.stringify(events[i].raw.data);

    rawData = rawData.replace(/^"0x/,'');

    rawData = rawData.replace(/"$/,'');

    var data = Buffer.from(rawData.match(/.{64}/g).join(''), 'hex');
    decoded = ethereumjs_abi.rawDecode(['uint256','address','uint256','uint256'], data);
    count     = web3.utils.toDecimal(decoded[0]);
    address   = "0x"+decoded[1];
    timestamp = web3.utils.toDecimal(decoded[2]);
    duration  = web3.utils.toDecimal(decoded[3]);
    chargeEvents.push({
                         eventId:eventCount,
                         count:count,
                         address:address,
                         timestamp:timestamp,
                         duration:duration,
                      });
    eventCount++;
  }
  console.log(chargeEvents);

 
});

/*-----------------------------------------------------*/
/*
EXAMPLE abi decode

data = Buffer.from([
    '0000000000000000000000000000000000000000000000000000000000000020',
    '000000000000000000000000627306090abab3a6e1400e9345bc60c78a8bef57',
    '000000000000000000000000000000000000000000000000000000005afd7647',
    '000000000000000000000000000000000000000000000000000000000000003d'].join(''), 'hex');
decoded = ethereumjs_abi.rawDecode(['uint256','address','uint256','uint256'], data);
console.log(`Decoded: ${JSON.stringify(decoded, null, '  ')}`);
*/

